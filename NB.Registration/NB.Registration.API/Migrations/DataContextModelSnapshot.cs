// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NB.Registration.Repository.Context;

namespace NB.Registration.API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NB.Registration.Domain.Aggregates.LegalPerson", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Birthdate");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Name");

                    b.Property<string>("PublicName");

                    b.Property<DateTime?>("Updated")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("LegalPerson");

                    b.HasData(
                        new { ID = new Guid("fc542592-e12d-48a9-9161-f0f2fddf6f77"), Active = true, Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Created = new DateTime(2018, 9, 11, 20, 45, 22, 459, DateTimeKind.Utc), Name = "Nome Empresa do Murilo", PublicName = "Empresa do Murilo", Updated = new DateTime(2018, 9, 11, 20, 45, 22, 459, DateTimeKind.Utc) }
                    );
                });

            modelBuilder.Entity("NB.Registration.Domain.Aggregates.PhysicalPerson", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Birthdate");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("PhysicalPerson");

                    b.HasData(
                        new { ID = new Guid("ff8a2b4d-fafe-49f3-9d79-cc714dd4ac35"), Active = true, Birthdate = new DateTime(1991, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), Created = new DateTime(2018, 9, 11, 20, 45, 22, 458, DateTimeKind.Utc), Name = "Murilo Henrique Silva Paxi", Updated = new DateTime(2018, 9, 11, 20, 45, 22, 458, DateTimeKind.Utc) }
                    );
                });

            modelBuilder.Entity("NB.Registration.Domain.Entities.DocumentType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("Updated")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("DocumentType");

                    b.HasData(
                        new { ID = new Guid("f19c4663-92fb-4b2d-a350-acc4e4effe16"), Active = true, Created = new DateTime(2018, 9, 11, 20, 45, 22, 455, DateTimeKind.Utc), Description = "Identity", Updated = new DateTime(2018, 9, 11, 20, 45, 22, 455, DateTimeKind.Utc) },
                        new { ID = new Guid("22276405-5c3a-42cb-a7bc-51d7f9cc24d1"), Active = true, Created = new DateTime(2018, 9, 11, 20, 45, 22, 455, DateTimeKind.Utc), Description = "Fisical Person Certidicate", Updated = new DateTime(2018, 9, 11, 20, 45, 22, 455, DateTimeKind.Utc) },
                        new { ID = new Guid("6671066b-cbe3-470c-a776-9a83f9644a38"), Active = true, Created = new DateTime(2018, 9, 11, 20, 45, 22, 455, DateTimeKind.Utc), Description = "Legal Person Certidicate", Updated = new DateTime(2018, 9, 11, 20, 45, 22, 455, DateTimeKind.Utc) }
                    );
                });

            modelBuilder.Entity("NB.Registration.Domain.Entities.InternetAddressType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("Updated")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("InternetAddressType");

                    b.HasData(
                        new { ID = new Guid("83e75fb2-ca4d-4106-9883-eced908cf1f0"), Active = true, Created = new DateTime(2018, 9, 11, 20, 45, 22, 455, DateTimeKind.Utc), Description = "Email", Updated = new DateTime(2018, 9, 11, 20, 45, 22, 455, DateTimeKind.Utc) },
                        new { ID = new Guid("20be7b7f-a96b-4fa4-9920-5f4b2b596d94"), Active = true, Created = new DateTime(2018, 9, 11, 20, 45, 22, 455, DateTimeKind.Utc), Description = "Push Notification", Updated = new DateTime(2018, 9, 11, 20, 45, 22, 455, DateTimeKind.Utc) }
                    );
                });

            modelBuilder.Entity("NB.Registration.Domain.Entities.LegalPersonDocument", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("DocumentTypeID");

                    b.Property<Guid>("LegalPersonID");

                    b.Property<DateTime?>("Updated")
                        .IsRequired();

                    b.Property<DateTime>("ValidDate");

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.HasIndex("DocumentTypeID");

                    b.HasIndex("LegalPersonID");

                    b.ToTable("LegalPersonDocument");

                    b.HasData(
                        new { ID = new Guid("68ecc1c5-175c-4a4c-82e1-1ec7bf7abcfe"), Active = true, Created = new DateTime(2018, 9, 11, 20, 45, 22, 459, DateTimeKind.Utc), DocumentTypeID = new Guid("6671066b-cbe3-470c-a776-9a83f9644a38"), LegalPersonID = new Guid("fc542592-e12d-48a9-9161-f0f2fddf6f77"), Updated = new DateTime(2018, 9, 11, 20, 45, 22, 459, DateTimeKind.Utc), ValidDate = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), Value = "61059245000189" }
                    );
                });

            modelBuilder.Entity("NB.Registration.Domain.Entities.LegalPersonInternetAddress", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("InternetAddressTypeID");

                    b.Property<Guid>("LegalPersonID");

                    b.Property<DateTime?>("Updated")
                        .IsRequired();

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.HasIndex("InternetAddressTypeID");

                    b.HasIndex("LegalPersonID");

                    b.ToTable("LegalPersonInternetAddress");

                    b.HasData(
                        new { ID = new Guid("7860f738-4e7a-4ecd-a939-45abf28d9e3b"), Active = true, Created = new DateTime(2018, 9, 11, 20, 45, 22, 460, DateTimeKind.Utc), InternetAddressTypeID = new Guid("83e75fb2-ca4d-4106-9883-eced908cf1f0"), LegalPersonID = new Guid("fc542592-e12d-48a9-9161-f0f2fddf6f77"), Updated = new DateTime(2018, 9, 11, 20, 45, 22, 460, DateTimeKind.Utc), Value = "murilo.paxiPJ@superdigital.com.br" }
                    );
                });

            modelBuilder.Entity("NB.Registration.Domain.Entities.Persons", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("LegalPersonID");

                    b.Property<Guid>("PhysicalPersonID");

                    b.Property<DateTime?>("Updated")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("LegalPersonID");

                    b.HasIndex("PhysicalPersonID");

                    b.ToTable("Persons");

                    b.HasData(
                        new { ID = new Guid("e02d78b1-685d-46b4-aa4a-816481580f43"), Active = true, Created = new DateTime(2018, 9, 11, 20, 45, 22, 460, DateTimeKind.Utc), LegalPersonID = new Guid("fc542592-e12d-48a9-9161-f0f2fddf6f77"), PhysicalPersonID = new Guid("ff8a2b4d-fafe-49f3-9d79-cc714dd4ac35"), Updated = new DateTime(2018, 9, 11, 20, 45, 22, 460, DateTimeKind.Utc) }
                    );
                });

            modelBuilder.Entity("NB.Registration.Domain.Entities.PhysicalPersonDocument", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("DocumentTypeID");

                    b.Property<Guid>("PhysicalPersonID");

                    b.Property<DateTime?>("Updated")
                        .IsRequired();

                    b.Property<DateTime>("ValidDate");

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.HasIndex("DocumentTypeID");

                    b.HasIndex("PhysicalPersonID");

                    b.ToTable("PhysicalPersonDocument");

                    b.HasData(
                        new { ID = new Guid("c29801f1-b23b-49a6-b5af-62182742bc81"), Active = true, Created = new DateTime(2018, 9, 11, 20, 45, 22, 459, DateTimeKind.Utc), DocumentTypeID = new Guid("f19c4663-92fb-4b2d-a350-acc4e4effe16"), PhysicalPersonID = new Guid("ff8a2b4d-fafe-49f3-9d79-cc714dd4ac35"), Updated = new DateTime(2018, 9, 11, 20, 45, 22, 459, DateTimeKind.Utc), ValidDate = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), Value = "3490527361" },
                        new { ID = new Guid("537aef95-fc65-4a78-bf0b-573951843384"), Active = true, Created = new DateTime(2018, 9, 11, 20, 45, 22, 459, DateTimeKind.Utc), DocumentTypeID = new Guid("22276405-5c3a-42cb-a7bc-51d7f9cc24d1"), PhysicalPersonID = new Guid("ff8a2b4d-fafe-49f3-9d79-cc714dd4ac35"), Updated = new DateTime(2018, 9, 11, 20, 45, 22, 459, DateTimeKind.Utc), ValidDate = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), Value = "34011746819" }
                    );
                });

            modelBuilder.Entity("NB.Registration.Domain.Entities.PhysicalPersonInternetAddress", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("InternetAddressTypeID");

                    b.Property<Guid>("PhysicalPersonID");

                    b.Property<DateTime?>("Updated")
                        .IsRequired();

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.HasIndex("InternetAddressTypeID");

                    b.HasIndex("PhysicalPersonID");

                    b.ToTable("PhysicalPersonInternetAddress");

                    b.HasData(
                        new { ID = new Guid("c703e27c-c102-412e-94a6-fe40cc6ef8b5"), Active = true, Created = new DateTime(2018, 9, 11, 20, 45, 22, 459, DateTimeKind.Utc), InternetAddressTypeID = new Guid("83e75fb2-ca4d-4106-9883-eced908cf1f0"), PhysicalPersonID = new Guid("ff8a2b4d-fafe-49f3-9d79-cc714dd4ac35"), Updated = new DateTime(2018, 9, 11, 20, 45, 22, 459, DateTimeKind.Utc), Value = "murilo.paxi@superdigital.com.br" }
                    );
                });

            modelBuilder.Entity("NB.Registration.Domain.Entities.LegalPersonDocument", b =>
                {
                    b.HasOne("NB.Registration.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("LegalPersonDocument")
                        .HasForeignKey("DocumentTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NB.Registration.Domain.Aggregates.LegalPerson", "LegalPerson")
                        .WithMany("Documents")
                        .HasForeignKey("LegalPersonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NB.Registration.Domain.Entities.LegalPersonInternetAddress", b =>
                {
                    b.HasOne("NB.Registration.Domain.Entities.InternetAddressType", "InternetAddressType")
                        .WithMany("LegalPersonInternetAddress")
                        .HasForeignKey("InternetAddressTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NB.Registration.Domain.Aggregates.LegalPerson", "LegalPerson")
                        .WithMany("InternetAddresses")
                        .HasForeignKey("LegalPersonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NB.Registration.Domain.Entities.Persons", b =>
                {
                    b.HasOne("NB.Registration.Domain.Aggregates.LegalPerson", "LegalPersons")
                        .WithMany("Persons")
                        .HasForeignKey("LegalPersonID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NB.Registration.Domain.Aggregates.PhysicalPerson", "PhysicalPerson")
                        .WithMany("Persons")
                        .HasForeignKey("PhysicalPersonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NB.Registration.Domain.Entities.PhysicalPersonDocument", b =>
                {
                    b.HasOne("NB.Registration.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("PhysicalPersonDocument")
                        .HasForeignKey("DocumentTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NB.Registration.Domain.Aggregates.PhysicalPerson", "PhysicalPerson")
                        .WithMany("Documents")
                        .HasForeignKey("PhysicalPersonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NB.Registration.Domain.Entities.PhysicalPersonInternetAddress", b =>
                {
                    b.HasOne("NB.Registration.Domain.Entities.InternetAddressType", "InternetAddressType")
                        .WithMany("PhysicalPersonInternetAddress")
                        .HasForeignKey("InternetAddressTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NB.Registration.Domain.Aggregates.PhysicalPerson", "PhysicalPerson")
                        .WithMany("InternetAddresses")
                        .HasForeignKey("PhysicalPersonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
