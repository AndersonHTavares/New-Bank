// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NB.CheckingAccountTransaction.Repository.Context;

namespace NB.CheckingAccountTransaction.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20180913200124_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NB.CheckingAccountTransaction.Domain.Aggregates.CheckingAccountTransaction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("CheckingAccountID");

                    b.Property<Guid>("CheckingAccountTransactionStatusID");

                    b.Property<Guid>("CheckingAccountTransactionTypeID");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CurrencyTypeID");

                    b.Property<Guid>("TracedID");

                    b.Property<decimal>("TransactionValue");

                    b.Property<DateTime?>("Updated")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("CheckingAccountTransactionStatusID");

                    b.HasIndex("CheckingAccountTransactionTypeID");

                    b.HasIndex("CurrencyTypeID");

                    b.ToTable("CheckingAccountTransaction");
                });

            modelBuilder.Entity("NB.CheckingAccountTransaction.Domain.Entities.CheckingAccountTransactionStatus", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<int>("Code");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("Updated")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasAlternateKey("Code");

                    b.ToTable("CheckingAccountTransactionStatus");

                    b.HasData(
                        new { ID = new Guid("d314587d-3edb-4911-8b21-0249b0bb0005"), Active = true, Code = 1, Created = new DateTime(2018, 9, 13, 20, 1, 23, 750, DateTimeKind.Utc), Description = "Authorized", Updated = new DateTime(2018, 9, 13, 20, 1, 23, 750, DateTimeKind.Utc) },
                        new { ID = new Guid("fb45206b-1d23-42c0-8f48-fb663f56b6ea"), Active = true, Code = 2, Created = new DateTime(2018, 9, 13, 20, 1, 23, 750, DateTimeKind.Utc), Description = "Canceled", Updated = new DateTime(2018, 9, 13, 20, 1, 23, 750, DateTimeKind.Utc) },
                        new { ID = new Guid("000c0e7b-3a34-4612-803b-b6510ddfdb26"), Active = true, Code = 3, Created = new DateTime(2018, 9, 13, 20, 1, 23, 750, DateTimeKind.Utc), Description = "In Analysis", Updated = new DateTime(2018, 9, 13, 20, 1, 23, 750, DateTimeKind.Utc) }
                    );
                });

            modelBuilder.Entity("NB.CheckingAccountTransaction.Domain.Entities.CheckingAccountTransactionType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<int>("Code");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("Updated")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasAlternateKey("Code");

                    b.ToTable("CheckingAccountTransactionType");

                    b.HasData(
                        new { ID = new Guid("30685f6d-f398-46f4-a147-2e99d7ec045a"), Active = true, Code = 1, Created = new DateTime(2018, 9, 13, 20, 1, 23, 750, DateTimeKind.Utc), Description = "Internal Transfer", Updated = new DateTime(2018, 9, 13, 20, 1, 23, 750, DateTimeKind.Utc) },
                        new { ID = new Guid("fa5af19c-58f5-458b-b887-fd0dc37bd1e1"), Active = true, Code = 2, Created = new DateTime(2018, 9, 13, 20, 1, 23, 750, DateTimeKind.Utc), Description = "External Transfer", Updated = new DateTime(2018, 9, 13, 20, 1, 23, 750, DateTimeKind.Utc) },
                        new { ID = new Guid("0d0c7992-7689-45de-8ae7-96db73eab84f"), Active = true, Code = 3, Created = new DateTime(2018, 9, 13, 20, 1, 23, 750, DateTimeKind.Utc), Description = "Transfer Fee", Updated = new DateTime(2018, 9, 13, 20, 1, 23, 750, DateTimeKind.Utc) }
                    );
                });

            modelBuilder.Entity("NB.CheckingAccountTransaction.Domain.Entities.Currency", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<int>("Code");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("Symbol");

                    b.Property<DateTime?>("Updated")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasAlternateKey("Code");

                    b.ToTable("Currency");

                    b.HasData(
                        new { ID = new Guid("6b577276-ddc9-4c8e-896a-eee8396eff82"), Active = true, Code = 1, Created = new DateTime(2018, 9, 13, 20, 1, 23, 749, DateTimeKind.Utc), Description = "BRL", Symbol = "R$", Updated = new DateTime(2018, 9, 13, 20, 1, 23, 750, DateTimeKind.Utc) },
                        new { ID = new Guid("31007805-21e7-401c-834f-723fc441731a"), Active = true, Code = 2, Created = new DateTime(2018, 9, 13, 20, 1, 23, 750, DateTimeKind.Utc), Description = "USD", Symbol = "$", Updated = new DateTime(2018, 9, 13, 20, 1, 23, 750, DateTimeKind.Utc) }
                    );
                });

            modelBuilder.Entity("NB.CheckingAccountTransaction.Domain.Aggregates.CheckingAccountTransaction", b =>
                {
                    b.HasOne("NB.CheckingAccountTransaction.Domain.Entities.CheckingAccountTransactionStatus", "CheckingAccountTransactionStatus")
                        .WithMany("CheckingAccountTransaction")
                        .HasForeignKey("CheckingAccountTransactionStatusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NB.CheckingAccountTransaction.Domain.Entities.CheckingAccountTransactionType", "CheckingAccountTransactionType")
                        .WithMany("CheckingAccountTransaction")
                        .HasForeignKey("CheckingAccountTransactionTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NB.CheckingAccountTransaction.Domain.Entities.Currency", "CurrencyType")
                        .WithMany("CheckingAccountTransaction")
                        .HasForeignKey("CurrencyTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
